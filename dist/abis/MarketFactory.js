"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketFactoryABI = void 0;
exports.MarketFactoryABI = [
    {
        inputs: [
            { internalType: "address", name: "_weth", type: "address" },
            { internalType: "address", name: "_usdc", type: "address" },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    { inputs: [], name: "AlreadyInitialized", type: "error" },
    {
        inputs: [{ internalType: "bytes32", name: "key", type: "bytes32" }],
        name: "EnumerableMapNonexistentKey",
        type: "error",
    },
    { inputs: [], name: "MarketFactory_AlreadyInitialized", type: "error" },
    { inputs: [], name: "MarketFactory_FailedToAddMarket", type: "error" },
    { inputs: [], name: "MarketFactory_FailedToAddRequest", type: "error" },
    { inputs: [], name: "MarketFactory_FailedToRemoveRequest", type: "error" },
    { inputs: [], name: "MarketFactory_InvalidDecimals", type: "error" },
    { inputs: [], name: "MarketFactory_InvalidFee", type: "error" },
    { inputs: [], name: "MarketFactory_InvalidOwner", type: "error" },
    { inputs: [], name: "MarketFactory_InvalidSecondaryStrategy", type: "error" },
    { inputs: [], name: "MarketFactory_InvalidTicker", type: "error" },
    { inputs: [], name: "MarketFactory_InvalidTimestamp", type: "error" },
    { inputs: [], name: "MarketFactory_MarketExists", type: "error" },
    { inputs: [], name: "MarketFactory_RequestDoesNotExist", type: "error" },
    { inputs: [], name: "MarketFactory_RequestExists", type: "error" },
    { inputs: [], name: "MarketFactory_SelfExecution", type: "error" },
    { inputs: [], name: "NewOwnerIsZeroAddress", type: "error" },
    { inputs: [], name: "NoHandoverRequest", type: "error" },
    { inputs: [], name: "Oracle_InvalidPoolType", type: "error" },
    { inputs: [], name: "Oracle_InvalidSecondaryStrategy", type: "error" },
    { inputs: [], name: "Reentrancy", type: "error" },
    { inputs: [], name: "Unauthorized", type: "error" },
    {
        anonymous: false,
        inputs: [
            { indexed: true, internalType: "string", name: "ticker", type: "string" },
        ],
        name: "AssetRequested",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            { indexed: true, internalType: "string", name: "ticker", type: "string" },
        ],
        name: "AssetSupported",
        type: "event",
    },
    { anonymous: false, inputs: [], name: "DefaultConfigSet", type: "event" },
    {
        anonymous: false,
        inputs: [
            { indexed: false, internalType: "MarketId", name: "id", type: "bytes32" },
            {
                indexed: false,
                internalType: "string",
                name: "ticker",
                type: "string",
            },
        ],
        name: "MarketCreated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "priceStorage",
                type: "address",
            },
        ],
        name: "MarketFactoryInitialized",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "requestKey",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "string",
                name: "indexTokenTicker",
                type: "string",
            },
        ],
        name: "MarketRequested",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "pendingOwner",
                type: "address",
            },
        ],
        name: "OwnershipHandoverCanceled",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "pendingOwner",
                type: "address",
            },
        ],
        name: "OwnershipHandoverRequested",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "oldOwner",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "OwnershipTransferred",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            { indexed: true, internalType: "address", name: "user", type: "address" },
            {
                indexed: true,
                internalType: "uint256",
                name: "roles",
                type: "uint256",
            },
        ],
        name: "RolesUpdated",
        type: "event",
    },
    {
        inputs: [],
        name: "cancelOwnershipHandover",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address", name: "pendingOwner", type: "address" },
        ],
        name: "completeOwnershipHandover",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    { internalType: "bool", name: "isMultiAsset", type: "bool" },
                    { internalType: "string", name: "indexTokenTicker", type: "string" },
                    { internalType: "string", name: "marketTokenName", type: "string" },
                    { internalType: "string", name: "marketTokenSymbol", type: "string" },
                    {
                        components: [
                            { internalType: "bool", name: "exists", type: "bool" },
                            {
                                internalType: "enum IPriceFeed.FeedType",
                                name: "feedType",
                                type: "uint8",
                            },
                            { internalType: "address", name: "feedAddress", type: "address" },
                            { internalType: "bytes32", name: "feedId", type: "bytes32" },
                            {
                                internalType: "bytes32[]",
                                name: "merkleProof",
                                type: "bytes32[]",
                            },
                        ],
                        internalType: "struct IPriceFeed.SecondaryStrategy",
                        name: "strategy",
                        type: "tuple",
                    },
                ],
                internalType: "struct IMarketFactory.Input",
                name: "_input",
                type: "tuple",
            },
        ],
        name: "createNewMarket",
        outputs: [{ internalType: "bytes32", name: "requestKey", type: "bytes32" }],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [],
        name: "cumulativeMarketIndex",
        outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "defaultConfig",
        outputs: [
            { internalType: "uint8", name: "maxLeverage", type: "uint8" },
            { internalType: "uint16", name: "maintenanceMargin", type: "uint16" },
            { internalType: "uint16", name: "reserveFactor", type: "uint16" },
            { internalType: "int16", name: "maxFundingVelocity", type: "int16" },
            { internalType: "int48", name: "skewScale", type: "int48" },
            { internalType: "int16", name: "positiveLiquidityScalar", type: "int16" },
            { internalType: "int16", name: "negativeLiquidityScalar", type: "int16" },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [{ internalType: "bytes32", name: "_requestKey", type: "bytes32" }],
        name: "executeMarketRequest",
        outputs: [{ internalType: "MarketId", name: "id", type: "bytes32" }],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "feeReceiver",
        outputs: [{ internalType: "address", name: "", type: "address" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [{ internalType: "bytes32", name: "_requestKey", type: "bytes32" }],
        name: "getRequest",
        outputs: [
            {
                components: [
                    {
                        components: [
                            { internalType: "bool", name: "isMultiAsset", type: "bool" },
                            {
                                internalType: "string",
                                name: "indexTokenTicker",
                                type: "string",
                            },
                            {
                                internalType: "string",
                                name: "marketTokenName",
                                type: "string",
                            },
                            {
                                internalType: "string",
                                name: "marketTokenSymbol",
                                type: "string",
                            },
                            {
                                components: [
                                    { internalType: "bool", name: "exists", type: "bool" },
                                    {
                                        internalType: "enum IPriceFeed.FeedType",
                                        name: "feedType",
                                        type: "uint8",
                                    },
                                    {
                                        internalType: "address",
                                        name: "feedAddress",
                                        type: "address",
                                    },
                                    { internalType: "bytes32", name: "feedId", type: "bytes32" },
                                    {
                                        internalType: "bytes32[]",
                                        name: "merkleProof",
                                        type: "bytes32[]",
                                    },
                                ],
                                internalType: "struct IPriceFeed.SecondaryStrategy",
                                name: "strategy",
                                type: "tuple",
                            },
                        ],
                        internalType: "struct IMarketFactory.Input",
                        name: "input",
                        type: "tuple",
                    },
                    { internalType: "uint48", name: "requestTimestamp", type: "uint48" },
                    { internalType: "address", name: "requester", type: "address" },
                ],
                internalType: "struct IMarketFactory.Request",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getRequestKeys",
        outputs: [{ internalType: "bytes32[]", name: "", type: "bytes32[]" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address", name: "user", type: "address" },
            { internalType: "uint256", name: "roles", type: "uint256" },
        ],
        name: "grantRoles",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address", name: "user", type: "address" },
            { internalType: "uint256", name: "roles", type: "uint256" },
        ],
        name: "hasAllRoles",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address", name: "user", type: "address" },
            { internalType: "uint256", name: "roles", type: "uint256" },
        ],
        name: "hasAnyRole",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    { internalType: "uint8", name: "maxLeverage", type: "uint8" },
                    { internalType: "uint16", name: "maintenanceMargin", type: "uint16" },
                    { internalType: "uint16", name: "reserveFactor", type: "uint16" },
                    { internalType: "int16", name: "maxFundingVelocity", type: "int16" },
                    { internalType: "int48", name: "skewScale", type: "int48" },
                    {
                        internalType: "int16",
                        name: "positiveLiquidityScalar",
                        type: "int16",
                    },
                    {
                        internalType: "int16",
                        name: "negativeLiquidityScalar",
                        type: "int16",
                    },
                ],
                internalType: "struct Pool.Config",
                name: "_defaultConfig",
                type: "tuple",
            },
            { internalType: "address", name: "_market", type: "address" },
            { internalType: "address", name: "_tradeStorage", type: "address" },
            { internalType: "address", name: "_tradeEngine", type: "address" },
            { internalType: "address", name: "_priceFeed", type: "address" },
            { internalType: "address", name: "_referralStorage", type: "address" },
            { internalType: "address", name: "_positionManager", type: "address" },
            { internalType: "address", name: "_router", type: "address" },
            { internalType: "address", name: "_feeDistributor", type: "address" },
            { internalType: "address", name: "_feeReceiver", type: "address" },
            { internalType: "uint256", name: "_marketCreationFee", type: "uint256" },
            { internalType: "uint256", name: "_marketExecutionFee", type: "uint256" },
        ],
        name: "initialize",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [{ internalType: "MarketId", name: "market", type: "bytes32" }],
        name: "isMarket",
        outputs: [{ internalType: "bool", name: "isMarket", type: "bool" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "marketCreationFee",
        outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "marketExecutionFee",
        outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [{ internalType: "uint256", name: "index", type: "uint256" }],
        name: "markets",
        outputs: [{ internalType: "MarketId", name: "market", type: "bytes32" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            { internalType: "string", name: "ticker", type: "string" },
            { internalType: "uint256", name: "", type: "uint256" },
        ],
        name: "marketsByTicker",
        outputs: [{ internalType: "MarketId", name: "marketIds", type: "bytes32" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "owner",
        outputs: [{ internalType: "address", name: "result", type: "address" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address", name: "pendingOwner", type: "address" },
        ],
        name: "ownershipHandoverExpiresAt",
        outputs: [{ internalType: "uint256", name: "result", type: "uint256" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "priceSupportFee",
        outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "pythMerkleRoot",
        outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [{ internalType: "uint256", name: "roles", type: "uint256" }],
        name: "renounceRoles",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    { internalType: "bool", name: "isMultiAsset", type: "bool" },
                    { internalType: "string", name: "indexTokenTicker", type: "string" },
                    { internalType: "string", name: "marketTokenName", type: "string" },
                    { internalType: "string", name: "marketTokenSymbol", type: "string" },
                    {
                        components: [
                            { internalType: "bool", name: "exists", type: "bool" },
                            {
                                internalType: "enum IPriceFeed.FeedType",
                                name: "feedType",
                                type: "uint8",
                            },
                            { internalType: "address", name: "feedAddress", type: "address" },
                            { internalType: "bytes32", name: "feedId", type: "bytes32" },
                            {
                                internalType: "bytes32[]",
                                name: "merkleProof",
                                type: "bytes32[]",
                            },
                        ],
                        internalType: "struct IPriceFeed.SecondaryStrategy",
                        name: "strategy",
                        type: "tuple",
                    },
                ],
                internalType: "struct IMarketFactory.Input",
                name: "_input",
                type: "tuple",
            },
        ],
        name: "requestAssetPricing",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [],
        name: "requestOwnershipHandover",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address", name: "user", type: "address" },
            { internalType: "uint256", name: "roles", type: "uint256" },
        ],
        name: "revokeRoles",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [{ internalType: "address", name: "user", type: "address" }],
        name: "rolesOf",
        outputs: [{ internalType: "uint256", name: "roles", type: "uint256" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    { internalType: "uint8", name: "maxLeverage", type: "uint8" },
                    { internalType: "uint16", name: "maintenanceMargin", type: "uint16" },
                    { internalType: "uint16", name: "reserveFactor", type: "uint16" },
                    { internalType: "int16", name: "maxFundingVelocity", type: "int16" },
                    { internalType: "int48", name: "skewScale", type: "int48" },
                    {
                        internalType: "int16",
                        name: "positiveLiquidityScalar",
                        type: "int16",
                    },
                    {
                        internalType: "int16",
                        name: "negativeLiquidityScalar",
                        type: "int16",
                    },
                ],
                internalType: "struct Pool.Config",
                name: "_defaultConfig",
                type: "tuple",
            },
        ],
        name: "setDefaultConfig",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_chainlinkFeedRegistry",
                type: "address",
            },
            { internalType: "address", name: "_uniV2Factory", type: "address" },
            { internalType: "address", name: "_uniV3Factory", type: "address" },
        ],
        name: "setFeedValidators",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address", name: "_rewardTracker", type: "address" },
        ],
        name: "setRewardTracker",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "stablecoinMerkleRoot",
        outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            { internalType: "bytes32", name: "_assetRequestKey", type: "bytes32" },
        ],
        name: "supportAsset",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address", name: "_feeDistributor", type: "address" },
        ],
        name: "updateFeeDistributor",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            { internalType: "uint256", name: "_marketCreationFee", type: "uint256" },
            { internalType: "uint256", name: "_marketExecutionFee", type: "uint256" },
            { internalType: "uint256", name: "_priceSupportFee", type: "uint256" },
        ],
        name: "updateMarketFees",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            { internalType: "bytes32", name: "_pythMerkleRoot", type: "bytes32" },
            {
                internalType: "bytes32",
                name: "_stablecoinMerkleRoot",
                type: "bytes32",
            },
        ],
        name: "updateMerkleRoots",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address", name: "_positionManager", type: "address" },
        ],
        name: "updatePositionManager",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "contract IPriceFeed",
                name: "_priceFeed",
                type: "address",
            },
        ],
        name: "updatePriceFeed",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "withdrawCreationTaxes",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
